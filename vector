/*
 * Copyright (c) 2011, Orestis Polychroniou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright owner nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OWNER ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/*  
 *  ADT vector
 *  Implemented using dynamic arrays
 *  Part of the my_STL project
 *  http://www.di.uoa.gr/~std06176/stl
 *  Report bugs at std06176@di.uoa.gr
 */


#ifndef MY_STL_VECTOR
#define MY_STL_VECTOR

#include "stltools"
#include <cstdlib>

namespace my_stl {

/* Required operators for class T:
 *  - copy constructor
 *  - order function (< is default)
 *   [for sort-heap-merge-binsearch]
 */

/*** ADT vector class ***/

template <class T>
class vector {
	private:
		T **array;
		unsigned int size_var;
		unsigned int capacity_var;
		inline void reallocate(unsigned int);
		inline void inswap(unsigned int, unsigned int);
		void unsafe_push_back(T*);
		template <class L> void quicksort(unsigned int, unsigned int, L&);
		template <class L> void quicksort(unsigned int, unsigned int, const L&);
	public:
		vector(void);
		vector(const vector&);
		vector<T>& operator = (const vector<T>&);
		~vector(void);
		bool empty(void) const;
		unsigned int size(void) const;
		unsigned int capacity(void) const;
		vector<T>& clear(void);
		vector<T>& resize(unsigned int, const T&);
		vector<T>& resize(unsigned int);
		vector<T>& reserve(unsigned int);
		T& operator [] (unsigned int);
		const T& operator [] (unsigned int) const;
		T& at(unsigned int);
		const T& at(unsigned int) const;
		T& last(unsigned int);
		const T& last(unsigned int) const;
		vector<T>& push_back(const T&, unsigned int);
		vector<T>& pop_back(unsigned int);
		vector<T>& insert(unsigned int, const T&, unsigned int);
		vector<T>& remove(unsigned int, unsigned int);
		vector<T>& replace(unsigned int, const T&);
		vector<T>& swap(unsigned int, unsigned int);
		vector<T>& swap(unsigned int, vector<T>&, unsigned int, unsigned int);
		vector<T>& assign(unsigned int, const T&);
		vector<T>& reverse(void);
		vector<T>& reverse(unsigned int, unsigned int);
		vector<T>& sort(void);
		template <class L> vector<T>& sort(L&);
		template <class L> vector<T>& sort(const L&);
		vector<T>& sort(unsigned int, unsigned int);
		template <class L> vector<T>& sort(unsigned int, unsigned int, L&);
		template <class L> vector<T>& sort(unsigned int, unsigned int, const L&);
		vector<T>& k_min(unsigned int);
		template <class L> vector<T>& k_min(unsigned int, L&);
		template <class L> vector<T>& k_min(unsigned int, const L&);
		vector<T>& k_min(unsigned int, unsigned int, unsigned int);
		template <class L> vector<T>& k_min(unsigned int, unsigned int, unsigned int, L&);
		template <class L> vector<T>& k_min(unsigned int, unsigned int, unsigned int, const L&);
		unsigned int binary_search(const T&);
		template <class L> unsigned int binary_search(const T&, L&);
		template <class L> unsigned int binary_search(const T&, const L&);
		unsigned int binary_search(unsigned int, unsigned int, const T&);
		template <class L> unsigned int binary_search(unsigned int, unsigned int, const T&, L&);
		template <class L> unsigned int binary_search(unsigned int, unsigned int, const T&, const L&);
		vector<T>& heapify(void);
		template <class L> vector<T>& heapify(L&);
		template <class L> vector<T>& heapify(const L&);
		vector<T>& heap_push(const T&);
		template <class L> vector<T>& heap_push(const T&, L&);
		template <class L> vector<T>& heap_push(const T&, const L&);
		vector<T>& heap_pop(unsigned int);
		template <class L> vector<T>& heap_pop(unsigned int, L&);
		template <class L> vector<T>& heap_pop(unsigned int, const L&);
		vector<T>& merge(vector<T>&);
		vector<T>& append(vector<T>&);
		vector<T>& swap(vector<T>&);
		template <class L> vector<T>& merge(vector<T>&, L&);
		template <class L> vector<T>& merge(vector<T>&, const L&);
		template <class L> vector<T>& remove_if(L&);
		template <class L> vector<T>& remove_if(const L&);
		template <class L> vector<T>& remove_if(unsigned int, unsigned int, L&);
		template <class L> vector<T>& remove_if(unsigned int, unsigned int, const L&);
		template <class L> vector<T>& append_if(vector<T>&, L&);
		template <class L> vector<T>& append_if(vector<T>&, const L&);
		template <class L> vector<T>& append_if(vector<T>&, unsigned int, unsigned int, L&);
		template <class L> vector<T>& append_if(vector<T>&, unsigned int, unsigned int, const L&);
};



/*** Internal operations ***/


template <class T>
inline void vector<T>::reallocate(unsigned int ncap) {
	T **narray;
	if (ncap == capacity_var) return;
	if (!(narray = (T**)realloc(array, ncap*sizeof(T*))))
		throw std::bad_alloc();
	array = narray;
	capacity_var = ncap;
}


template <class T>
inline void vector<T>::inswap(unsigned int p1, unsigned int p2) {
	T *t = array[p1];
	array[p1] = array[p2];
	array[p2] = t;
}


template <class T>
void vector<T>::unsafe_push_back(T* d) {
	if (capacity_var == size_var)
		try {
			reallocate(capacity_var << 1);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	array[size_var++] = d;
}


template <class T>
template <class L>
void vector<T>::quicksort(unsigned int low, unsigned int high, L& cl) {
	unsigned int left, right, pivot;
	do {
		left = low;
		right = high;
		pivot = (low+high)>>1;
		if (cl(*(array[pivot]), *(array[left])))
			inswap(left, pivot);
		if (cl(*(array[right]), *(array[left])))
			inswap(right, left);
		if (cl(*(array[right]), *(array[pivot])))
			inswap(right, pivot);
		if (right-left < 3) return;
		inswap(low, pivot);
		do {
			while (cl(*(array[left]), *(array[low])))
				left++;
			while (cl(*(array[low]), *(array[right])))
				right--;
			if (left < right)
				inswap(left++, right--);
			else if (left == right) {
				left++;
				right--;
			}
		} while (left <= right);
		if (low < right) quicksort(low, right, cl);
	} while ((low = left) < high);
}


template <class T>
template <class L>
void vector<T>::quicksort(unsigned int low, unsigned int high, const L& cl) {
	unsigned int left, right, pivot;
	do {
		left = low;
		right = high;
		pivot = (low+high)>>1;
		if (cl(*(array[pivot]), *(array[left])))
			inswap(left, pivot);
		if (cl(*(array[right]), *(array[left])))
			inswap(right, left);
		if (cl(*(array[right]), *(array[pivot])))
			inswap(right, pivot);
		if (right-left < 3) return;
		inswap(low, pivot);
		do {
			while (cl(*(array[left]), *(array[low])))
				left++;
			while (cl(*(array[low]), *(array[right])))
				right--;
			if (left < right)
				inswap(left++, right--);
			else if (left == right) {
				left++;
				right--;
			}
		} while (left <= right);
		if (low < right) quicksort(low, right, cl);
	} while ((low = left) < high);
}



/*** Operations ***/


template <class T>
vector<T>::vector(void):
	size_var(0), capacity_var(16) {
	if (!(array = (T**) malloc(16*sizeof(T*))))
		throw overflow();
}


template <class T>
vector<T>::vector(const vector& clone):
	size_var(clone.size_var), capacity_var(clone.capacity_var) {
	T **c, **s, **e;
	if (!(array = (T**)malloc(capacity_var*sizeof(T*))))
		throw overflow();
	for (c = array, s = clone.array, e = &clone.array[size_var] ;
	     s != e ; ++c, ++s)
		try {
			*c = new T(**s);
		} catch (std::bad_alloc&) {
			size_var = c-array;
			throw overflow();
		} catch (...) {
			size_var = c-array;
			throw;
		}
}


template <class T>
vector<T>& vector<T>::operator = (const vector& clone) {
	T **c, **s, **e;
	if (&clone == this) return *this;
	for (s = array, e = &array[size_var] ; s != e ; s++)
		delete *s;
	size_var = 0;
	if (capacity_var > clone.capacity_var<<1 ||
	    capacity_var < clone.capacity_var)
		try {
			reallocate(clone.capacity_var);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	size_var = clone.size_var;
	for (c = array, s = clone.array, e = &clone.array[size_var] ;
	     s != e ; ++c, ++s)
		try {
			*c = new T(**s);
		} catch (std::bad_alloc&) {
			size_var = c-array;
			throw overflow();
		} catch (...) {
			size_var = c-array;
			throw;
		}
	return *this;
}


template <class T>
vector<T>::~vector(void) {
	T **s, **e;
	for (s = array, e = &array[size_var] ; s != e ; ++s)
		delete *s;
	free(array);
}


template <class T>
bool vector<T>::empty(void) const {
	return !size_var;
}


template <class T>
unsigned int vector<T>::size(void) const {
	return size_var;
}


template <class T>
unsigned int vector<T>::capacity(void) const {
	return capacity_var;
}


template <class T>
vector<T>& vector<T>::clear(void) {
	T **s, **e;
	for (s = array, e = &array[size_var] ; s != e ; ++s)
		delete *s;
	size_var = 0;
	if (capacity_var != 16)
		try {
			reallocate(16);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
vector<T>& vector<T>::resize(unsigned int nsize, const T& d) {
	unsigned int ncap;
	bool l = false;
	T **s, **e;
	if (size_var > nsize) {
		for (s = &array[nsize], e = &array[size_var] ; s != e ; ++s)
			delete *s;
		size_var = nsize;
		l = true;
	}
	for (ncap = 16 ; ncap < nsize ; ncap <<= 1);
	if (ncap == capacity_var || ncap == capacity_var>>1) return *this;
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {
		if (l) return *this;
		throw overflow();
	}
	if (nsize > size_var) {
		for (s = &array[size_var], e = &array[nsize] ; s != e ; ++s)
			try {
				*s = new T(d);
			} catch (std::bad_alloc&) {
				size_var += s-&array[size_var];
				throw overflow();
			} catch (...) {
				size_var += s-&array[size_var];
				throw;
			}
		size_var = nsize;
	}
	return *this;
}


template <class T>
vector<T>& vector<T>::resize(unsigned int nsize) {
	return pop_back(size_var-nsize);
}


template <class T>
vector<T>& vector<T>::reserve(unsigned int rcap) {
	unsigned int ncap;
	for (ncap = capacity_var ; ncap < rcap ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	return *this;
}


template <class T>
T& vector<T>::operator [] (unsigned int pos) {
	if (pos >= size_var) throw offbounds();
	return *(array[pos]);
}


template <class T>
const T& vector<T>::operator [] (unsigned int pos) const {
	if (pos >= size_var) throw offbounds();
	return *(array[pos]);
}


template <class T>
T& vector<T>::at(unsigned int pos) {
	if (!pos || pos > size_var) throw offbounds();
	return *(array[pos-1]);
}


template <class T>
const T& vector<T>::at(unsigned int pos) const {
	if (!pos || pos > size_var) throw offbounds();
	return *(array[pos-1]);
}


template <class T>
T& vector<T>::last(unsigned int p = 0) {
	if (size_var <= p) throw offbounds();
	return *(array[size_var-p-1]);
}


template <class T>
const T& vector<T>::last(unsigned int p = 0) const {
	if (size_var <= p) throw offbounds();
	return *(array[size_var-p-1]);
}


template <class T>
vector<T>& vector<T>::push_back(const T& d, unsigned int n = 1) {
	T **s, **e;
	unsigned int ncap, nsize;
	if (!n) return *this;
	nsize = size_var+n;
	for (ncap = capacity_var ; ncap < nsize ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (s = &array[size_var], e = &array[nsize] ; s != e ; ++s)
		try {
			*s = new T(d);
		} catch (std::bad_alloc&) {
			for (e = &array[size_var] ; e != s ; ++e)
				delete *e;
			throw overflow();
		}
	size_var = nsize;
	return *this;
}


template <class T>
vector<T>& vector<T>::pop_back(unsigned int n = 1) {
	T **s, **e;
	unsigned int ncap;
	if (!n) return *this;
	if (n > size_var) throw underflow();
	for (s = &array[size_var-n], e = &array[size_var] ; s != e ; ++s)
		delete *s;
	size_var -= n;
	for (ncap = capacity_var ; ncap != 16 && (ncap>>2) > size_var ;
	     ncap >>= 1);
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
vector<T>& vector<T>::insert(unsigned int p, const T& d,
	                         unsigned int n = 1) {
	T **s, **e, **c, **buf;
	unsigned int ncap, nsize;
	if (!n || p > size_var) throw offbounds();
	nsize = size_var+n;
	for (ncap = capacity_var ; ncap < nsize ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	try {
		buf = new T* [n];
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	try {
		for (s = buf, e = &buf[n] ; s != e ; ++s)
			*s = new T(d);
	} catch (std::bad_alloc&) {
		for (--s, e = &buf[-1] ; s != e ; --s)
			delete *s;
		delete[] buf;
		throw overflow();
	} catch (...) {
		for (--s, e = &buf[-1] ; s != e ; --s)
			delete *s;
		delete[] buf;
		throw;
	}
	for (s = &array[nsize-1], e = &array[p+n-1] ; s != e ; --s)
		*s = *(s-n);
	for (c = buf, s = &array[p], e = &array[p+n] ; s != e ; ++c, ++s)
		*s = *c;
	delete[] buf;
	size_var = nsize;
	return *this;
}


template <class T>
vector<T>& vector<T>::remove(unsigned int p, unsigned int n = 1) {
	T **s, **e;
	if (!n || p+n > size_var) throw offbounds();
	size_var -= n;
	for (s = &array[p], e = &array[p+n] ; s != e ; ++s)
		delete *s;
	for (s = &array[p], e = &array[size_var] ; s != e ; ++s)
		*s = *(s+n);
	if (size_var < capacity_var>>2 && capacity_var != 16)
		try {
			reallocate(capacity_var>>1);
		 } catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
vector<T>& vector<T>::replace(unsigned int p, const T& d) {
	T *t;
	if (p < 0 || p >= size_var) throw offbounds();
	try {
		t = new T(d);
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	delete array[p];
	array[p] = t;
	return *this;
}


template <class T>
vector<T>& vector<T>::swap(unsigned int p1, unsigned int p2) {
	if (p1 >= size_var || p2 >= size_var)
		throw offbounds();
	inswap(p1, p2);
	return *this;
}


template <class T>
vector<T>& vector<T>::swap(unsigned int sp, vector<T>& param,
                           unsigned int pp, unsigned int nsize = 1) {
	T **s, **e, **o, *t;
	if (sp + nsize > size_var || pp + nsize > param.size_var)
		throw offbounds();
	for (s = &array[sp], o = &array[pp], e = &array[sp + nsize] ;
	     s != e ; ++s, ++o) {
		t = *s;
		*s = *o;
		*o = t;
	}
	return *this;
}


template <class T>
vector<T>& vector<T>::assign(unsigned int nsize, const T& d) {
	T **s, **e;
	unsigned int ncap;
	for (s = array, e = &array[size_var] ; s != e ; s++)
		delete *s;
	size_var = 0;
	for (ncap = 16 ; ncap < nsize ; ncap <<= 1);
	if (ncap != capacity_var && ncap != capacity_var>>1)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (s = array, e = &array[nsize] ; s != e ; ++s)
		try {
			*s = new T(d);
		} catch (std::bad_alloc&) {
			size_var = s-array;
			throw overflow();
		} catch (...) {
			size_var = s-array;
			throw;
		}
	size_var = nsize;
	return *this;
}


template <class T>
vector<T>& vector<T>::reverse(void) {
	return reverse(0, size_var);
}


template <class T>
vector<T>& vector<T>::reverse(unsigned int p, unsigned int n) {
	T *t, **s = &array[p];
	T **e = &array[p + n - 1];
	T **m = &array[p + (n >> 1)];
	for (; s != m ; ++s, --e) {
		t = *s;
		*s = *e;
		*e = t;
	}
	return *this;
}


template <class T>
vector<T>& vector<T>::sort(void) {
	less<T> def_less;
	return sort(def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::sort(L& cl) {
	if (size_var > 1)
		quicksort(0, size_var-1, cl);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::sort(const L& cl) {
	if (size_var > 1) quicksort(0, size_var-1, cl);
	return *this;
}


template <class T>
vector<T>& vector<T>::sort(unsigned int p, unsigned int n) {
	less<T> def_less;
	return sort(p, n, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::sort(unsigned int p, unsigned int n, L& cl) {
	if (!n || p+n > size_var) throw offbounds();
	if (n > 1) quicksort(p, p+n-1, cl);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::sort(unsigned int p, unsigned int n, const L& cl) {
	if (!n || p+n > size_var) throw offbounds();
	if (n > 1) quicksort(p, p+n-1, cl);
	return *this;
}


template <class T>
vector<T>& vector<T>::k_min(unsigned int k) {
	less<T> def_less;
	return k_min(0, size_var, k, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::k_min(unsigned int k, L& cl) {
	return k_min(0, size_var, k, cl);
}


template <class T>
template <class L>
vector<T>& vector<T>::k_min(unsigned int k, const L& cl) {
	return k_min(0, size_var, k, cl);
}


template <class T>
vector<T>& vector<T>::k_min(unsigned int p, unsigned int n,
	                        unsigned int k) {
	less<T> def_less;
	return k_min(p, n, k, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::k_min(unsigned int p, unsigned int n,
	                        unsigned int k, L& cl) {
	T *pivotval;
	unsigned int i, pivot, index, left, right, low = p, high = p+n-1;
	if (!k || !n || k > n || p+n > size_var) return offbounds();
	if (n < 2 || k == n) return *this;
	do {
		left = low;
		right = high;
		pivot = (low+high)>>1;
		if (cl(*(array[pivot]), *(array[left])))
			inswap(left, pivot);
		if (cl(*(array[right]), *(array[left])))
			inswap(right, left);
		if (cl(*(array[right]), *(array[pivot])))
			inswap(right, pivot);
		pivotval = array[pivot];
		inswap(pivot, right);
		for (i = left ; i != right ; ++i)
			if (cl(*(array[i]), *pivotval))
				inswap(i, index++);
		inswap(right, index);
		if (index > k)
			high = index-1;
		else if (index < k)
			low = index+1;
		else break;
	} while (low < high);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::k_min(unsigned int p, unsigned int n,
	                        unsigned int k, const L& cl) {
	T *pivotval;
	unsigned int i, pivot, index, left, right, low = p, high = p+n-1;
	if (!k || !n || k > n || p+n > size_var) return offbounds();
	if (n < 2 || k == n) return *this;
	do {
		left = low;
		right = high;
		pivot = (low+high)>>1;
		if (cl(*(array[pivot]), *(array[left])))
			inswap(left, pivot);
		if (cl(*(array[right]), *(array[left])))
			inswap(right, left);
		if (cl(*(array[right]), *(array[pivot])))
			inswap(right, pivot);
		pivotval = array[pivot];
		inswap(pivot, right);
		for (i = left ; i != right ; ++i)
			if (cl(*(array[i]), *pivotval))
				inswap(i, index++);
		inswap(right, index);
		if (index > k)
			high = index-1;
		else if (index < k)
			low = index+1;
		else break;
	} while (low < high);
	return *this;
}


template <class T>
unsigned int vector<T>::binary_search(const T& d) {
	less<T> def_less;
	return binary_search(0, size_var, d, def_less);
}


template <class T>
template <class L>
unsigned int vector<T>::binary_search(const T& d, L& cl) {
	return binary_search(0, size_var, d, cl);
}


template <class T>
template <class L>
unsigned int vector<T>::binary_search(const T& d, const L& cl) {
	return binary_search(0, size_var, d, cl);
}


template <class T>
unsigned int vector<T>::binary_search(unsigned int p, unsigned int n,
                                      const T& d) {
	less<T> def_less;
	return binary_search(p, n, d, def_less);
}


template <class T>
template <class L>
unsigned int vector<T>::binary_search(unsigned int p, unsigned int n,
	                                  const T& d, L& cl) {
	unsigned int mid, low = p, high = p+n-1;
	if (!n || p+n > size_var) throw offbounds();
	while (low <= high) {
		mid = (low+high)>>1;
		if (cl(d, *(array[mid])))
			high = mid-1;
		else if (cl(*(array[mid]), d))
			low = mid+1;
		else break;
	}
	return mid;
}


template <class T>
template <class L>
unsigned int vector<T>::binary_search(unsigned int p, unsigned int n,
	                                  const T& d, const L& cl) {
	unsigned int mid, low = p, high = p+n-1;
	if (!n || p+n > size_var) throw offbounds();
	while (low <= high) {
		mid = (low+high)>>1;
		if (cl(d, *(array[mid])))
			high = mid-1;
		else if (cl(*(array[mid]), d))
			low = mid+1;
		else break;
	}
	return mid;
}


template <class T>
vector<T>& vector<T>::heapify(void) {
	less<T> def_less;
	return heapify(def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::heapify(L& cl) {
	unsigned int i, c, f;
	if (size_var < 2) return *this;
	array--;
	for (i = size_var>>1 ; i ; --i)
		for (f = i ; (c = (f<<1)) <= size_var ; f = c) {
			if (c < size_var && cl(*(array[c+1]), *(array[c])))
				c++;
			if (!cl(*(array[c]), *(array[f]))) break;
			inswap(f, c);
		}
	array++;
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::heapify(const L& cl) {
	unsigned int i, c, f;
	if (size_var < 2) return *this;
	array--;
	for (i = size_var>>1 ; i ; --i)
		for (f = i ; (c = (f<<1)) <= size_var ; f = c) {
			if (c < size_var && cl(*(array[c+1]), *(array[c])))
				c++;
			if (!cl(*(array[c]), *(array[f]))) break;
			inswap(f, c);
		}
	array++;
	return *this;
}


template <class T>
vector<T>& vector<T>::heap_push(const T& d) {
	less<T> def_less;
	return heap_push(d, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::heap_push(const T& d, L& cl) {
	unsigned int c, f;
	push_back(d);
	for (c = size_var-1 ; c ; c = f) {
		f = (c-1)>>1;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::heap_push(const T& d, const L& cl) {
	unsigned int c, f;
	push_back(d);
	for (c = size_var-1 ; c ; c = f) {
		f = (c-1)>>1;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::heap_pop(unsigned int f, L& cl) {
	unsigned int c;
	T* t = array[f];
	if (!size_var) throw underflow();
	if (f >= size_var) throw offbounds();
	array[f] = array[size_var-1];
	while ((c = f)) {
		f = (c-1)>>1;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	for (f = c ; (c = (f<<1)+1) < size_var ; f = c) {
		if (c+1 < size_var && cl(*(array[c+1]), *(array[c]))) c++;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	array[size_var-1] = t;
	return pop_back();
}



template <class T>
vector<T>& vector<T>::heap_pop(unsigned int f = 0) {
	less<T> def_less;
	return heap_pop(f, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::heap_pop(unsigned int f, const L& cl) {
	unsigned int c;
	T* t = array[f];
	if (!size_var) throw underflow();
	if (f >= size_var) throw offbounds();
	array[f] = array[size_var-1];
	while ((c = f)) {
		f = (c-1)>>1;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	for (f = c ; (c = (f<<1)+1) < size_var ; f = c) {
		if (c+1 < size_var && cl(*(array[c+1]), *(array[c]))) c++;
		if (!cl(*(array[c]), *(array[f]))) break;
		inswap(f, c);
	}
	array[size_var-1] = t;
	return pop_back();
}


template <class T>
vector<T>& vector<T>::merge(vector<T>& param) {
	less<T> def_less;
	return merge(param, def_less);
}


template <class T>
template <class L>
vector<T>& vector<T>::merge(vector<T>& param, L& cl) {
	T **s1, **s2, **e1, **e2, **c;
	unsigned int nsize, ncap;
	if (!param.size_var) return *this;
	if (!size_var) return swap(param);
	nsize = size_var+param.size_var;
	for (ncap = capacity_var ; ncap < nsize ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (s1 = &array[size_var-1], e1 = array-1, c = &array[nsize-1] ;
	     s1 != e1 ; --s1, --c)
		*c = *s1;
	for (c = array, s1 = &array[param.size_var], e1 = &array[nsize],
	     s2 = param.array, e2 = &param.array[param.size_var] ;
	     s1 != e1 && s2 != e2 ; ++c)
		if (cl(**s2, **s1))
			*c = *s2++;
		else
			*c = *s1++;
	for (; s2 != e2 ; ++s2, ++c)
		*c = *s2;
	size_var = nsize;
	param.size_var = 0;
	param.clear();
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::merge(vector<T>& param, const L& cl) {
	T **s1, **s2, **e1, **e2, **c;
	unsigned int nsize, ncap;
	if (!param.size_var) return *this;
	if (!size_var) return swap(param);
	nsize = size_var+param.size_var;
	for (ncap = capacity_var ; ncap < nsize ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (s1 = &array[size_var-1], e1 = array-1, c = &array[nsize-1] ;
	     s1 != e1 ; --s1, --c)
		*c = *s1;
	for (c = array, s1 = &array[param.size_var], e1 = &array[nsize],
	     s2 = param.array, e2 = &param.array[param.size_var] ;
	     s1 != e1 && s2 != e2 ; ++c)
		if (cl(**s2, **s1))
			*c = *s2++;
		else
			*c = *s1++;
	for (; s2 != e2 ; ++s2, ++c)
		*c = *s2;
	size_var = nsize;
	param.size_var = 0;
	param.clear();
	return *this;
}


template <class T>
vector<T>& vector<T>::append(vector<T>& param) {
	T **s, **e, **c;
	unsigned int nsize, ncap;
	if (!param.size_var) return *this;
	if (!size_var) return swap(param);
	nsize = size_var + param.size_var;
	for (ncap = capacity_var ; ncap < nsize ; ncap <<= 1);
	if (ncap > capacity_var)
		try {
			reallocate(ncap);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (c = &array[size_var], s = param.array,
	     e = &param.array[param.size_var] ; s != e ; ++s, ++c)
		*c = *s;
	size_var = nsize;
	param.size_var = 0;
	param.clear();
	return *this;
}


template <class T>
vector<T>& vector<T>::swap(vector<T>& param) {
	unsigned int n;
	T **a;
	n = param.size_var;
	param.size_var = size_var;
	size_var = n;
	n = param.capacity_var;
	param.capacity_var = capacity_var;
	capacity_var = n;
	a = param.array;
	param.array = array;
	array = a;
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::remove_if(L& fun) {
	if (size_var) remove_if(0, size_var, fun);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::remove_if(const L& fun) {
	if (size_var) remove_if(0, size_var, fun);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::remove_if(unsigned int f, unsigned int n, L& fun) {
	T **s, **e, **p;
	unsigned int ncap, d = 0;
	if (f + n > size_var)
		throw offbounds();
	for (s = &array[f], e = &array[f + n] ; s != e ; ++s)
		if (fun(**s)) {
			delete *s;
			*s = 0;
			d++;
		}
	if (!d) return *this;
	if (d == size_var) {
		size_var = 0;
		return clear();
	}
	for (p = &array[f] ; *p ; ++p);
	for (s = p + 1, e = &array[size_var] ; s != e ; ++s)
		if (*s) *p++ = *s;
	size_var -= d;
	for (ncap = capacity_var ; ncap != 16 && (ncap>>2) > size_var ;
	     ncap >>= 1);
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::remove_if(unsigned int f, unsigned int n, const L& fun) {
	T **s, **e, **p;
	unsigned int ncap, d = 0;
	if (f + n > size_var)
		throw offbounds();
	for (s = &array[f], e = &array[f + n] ; s != e ; ++s)
		if (fun(**s)) {
			delete *s;
			*s = 0;
			d++;
		}
	if (!d) return *this;
	if (d == size_var) {
		size_var = 0;
		return clear();
	}
	for (p = &array[f] ; *p ; ++p);
	for (s = p + 1, e = &array[size_var] ; s != e ; ++s)
		if (*s) *p++ = *s;
	size_var -= d;
	for (ncap = capacity_var ; ncap != 16 && (ncap>>2) > size_var ;
	     ncap >>= 1);
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::append_if(vector<T>& param, L& fun) {
	if (size_var) append_if(param, 0, size_var, fun);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::append_if(vector<T>& param, const L& fun) {
	if (size_var) append_if(param, 0, size_var, fun);
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::append_if(vector<T>& param, unsigned int f,
                                unsigned int n, L& fun) {
	T **s, **e, **p;
	unsigned int ncap, d = 0;
	if (f + n > size_var)
		throw offbounds();
	for (s = &array[f], e = &array[f + n] ; s != e ; ++s)
		if (fun(**s)) {
			param.unsafe_push_back(*s);
			*s = 0;
			d++;
		}
	if (!d) return *this;
	if (d == size_var) {
		size_var = 0;
		return clear();
	}
	for (p = &array[f] ; *p ; ++p);
	for (s = p + 1, e = &array[size_var] ; s != e ; ++s)
		if (*s) *p++ = *s;
	size_var -= d;
	for (ncap = capacity_var ; ncap != 16 && (ncap>>2) > size_var ;
	     ncap >>= 1);
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {}
	return *this;
}


template <class T>
template <class L>
vector<T>& vector<T>::append_if(vector<T>& param, unsigned int f,
                                unsigned int n, const L& fun) {
	T **s, **e, **p;
	unsigned int ncap, d = 0;
	if (f + n > size_var)
		throw offbounds();
	for (s = &array[f], e = &array[f + n] ; s != e ; ++s)
		if (fun(**s)) {
			param.unsafe_push_back(*s);
			*s = 0;
			d++;
		}
	if (!d) return *this;
	if (d == size_var) {
		size_var = 0;
		return clear();
	}
	for (p = &array[f] ; *p ; ++p);
	for (s = p + 1, e = &array[size_var] ; s != e ; ++s)
		if (*s) *p++ = *s;
	size_var -= d;
	for (ncap = capacity_var ; ncap != 16 && (ncap>>2) > size_var ;
	     ncap >>= 1);
	try {
		reallocate(ncap);
	} catch (std::bad_alloc&) {}
	return *this;
}

}

#endif
