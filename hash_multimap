/*
 * Copyright (c) 2011, Orestis Polychroniou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright owner nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OWNER ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/*  
 *  ADT hash map
 *  Implemented using hash table
 *  Part of the my_STL project
 *  http://www.di.uoa.gr/~std06176/stl
 *  Report bugs at std06176@di.uoa.gr
 */


#ifndef MY_STL_HASH_MULTIMAP
#define MY_STL_HASH_MULTIMAP

#include "stltools"

namespace my_stl {

/* Required operators for class K:
 *  - copy constructor
 *  - equal function (== is default)
 *  - serialize function
 *
 * Required operators for class T:
 *  - copy constructor
 */

/*** ADT map class ***/

template <class K, class T, class H = hash<K>, class E = equal<K> >
class hash_multimap {
	private:
		H hash;
		E equal;
		struct node {
			K key;
			T data;
			node *next;
			node(const K&, const T&, node*);
			~node(void);
		};
		node **table;
		int pos;
		unsigned int size_var;
		unsigned int unique_var;
		static const unsigned int primes[];
		void extend(unsigned int);
	public:
		hash_multimap(void);
		hash_multimap(const H&);
		hash_multimap(const H&, const E&);
		hash_multimap(const hash_multimap<K,T,H,E>&);
		hash_multimap<K,T,H,E>& operator = (const hash_multimap<K,T,H,E>&);
		~hash_multimap(void);
		bool empty(void) const;
		unsigned int size(void) const;
		unsigned int unique(void) const;
		hash_multimap<K,T,H,E>& clear(void);
		hash_multimap<K,T,H,E>& reserve(unsigned int);
		bool find(const K&) const;
		unsigned int count(const K&) const;
		T& operator [] (const K&);
		const T& operator [] (const K&) const;
		hash_multimap<K,T,H,E>& insert(const K&, const T&);
		hash_multimap<K,T,H,E>& remove(const K&);
		hash_multimap<K,T,H,E>& extract(const K&, unsigned int);
		hash_multimap<K,T,H,E>& merge(hash_multimap<K,T,H,E>&);
		hash_multimap<K,T,H,E>& swap(hash_multimap<K,T,H,E>&);
};



/*** Internal operations ***/


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::node::node(const K& k, const T& d, node *n):
	key(k), data(d), next(n) {}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::node::~node(void) {}


template <class K, class T, class H, class E>
inline void hash_multimap<K,T,H,E>::extend(unsigned int npos) {
	unsigned int o, c;
	node **s, **e, **n, *p, *d, **ntable;
	if (npos < 0 || npos > 27) return;
	o = primes[npos];
	c = size_var;
	ntable = new node* [o];
	for (s = ntable, e = &ntable[o] ; s != e ; ++s)
		*s = 0;
	for (s = table, e = &table[primes[pos]] ; s != e && c ; ++s) {
		p = *s;
		while (p) {
			d = p;
			p = p->next;
			n = &ntable[hash(d->key) % o];
			d->next = *n;
			*n = d;
			c--;
		}
	}
	delete[] table;
	table = ntable;
	pos = npos;
}


template <class K, class T, class H, class E>
const unsigned int hash_multimap<K,T,H,E>::primes[28] = {
	13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749,
	65521, 131071, 262139, 524287, 1048573, 2097143, 4194301,
	8388593, 16777213, 33554393, 67108859, 134217689,
	268435399, 536870909, 1073741789, 2147483647
};



/*** Operations ***/


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::hash_multimap(void):
	pos(0),
	size_var(0),
	unique_var(0) {
	node **s, **e;
	try {
		table = new node* [primes[0]];
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	for (s = table, e = &table[primes[0]] ; s != e ; ++s)
		*s = 0;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::hash_multimap(const H& hashf):
	hash(hashf),
	pos(0),
	size_var(0),
	unique_var(0) {
	node **s, **e;
	try {
		table = new node* [primes[0]];
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	for (s = table, e = &table[primes[0]] ; s != e ; ++s)
		*s = 0;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::hash_multimap(const H& hashf, const E& ecmp):
	hash(hashf),
	equal(ecmp),
	pos(0),
	size_var(0),
	unique_var(0) {
	node **s, **e;
	try {
		table = new node* [primes[0]];
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	for (s = table, e = &table[primes[0]] ; s != e ; ++s)
		*s = 0;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::hash_multimap(const hash_multimap& clone):
	hash(clone.hash),
	equal(clone.equal),
	pos(clone.pos),
	size_var(clone.size_var),
	unique_var(clone.unique_var) {
	node **s, **e, **c, *p, *t;
	unsigned int m;
	try {
		table = new node* [primes[pos]];
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	for (m = 0, s = table, e = &table[primes[pos]],
	     c = clone.table ; s != e ; ++s, ++c) {
		if (!(p = *c)) *s = 0;
		else
			try {
				node *n = *s = new node(p->key, p->data, 0);
				m++;
				while ((p = p->next)) {
					n->next = new node(p->key, p->data, 0);
					n = n->next;
					m++;
				}	
			} catch (std::bad_alloc&) {
				for (e = &table[-1] ; s != e && m ; --s)
					for (p = *s ; p ; t = p, p = p->next) {
						delete t;
						m--;
					}
				delete[] table;
				throw overflow();
			} catch (...) {
				for (e = &table[-1] ; s != e && m ; --s)
					for (p = *s ; p ; t = p, p = p->next) {
						delete t;
						m--;
					}
				delete[] table;
				throw;
			}
	}
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::operator = (const hash_multimap
	                                                    & clone) {
	node **s, **e, **c, *p, *t;
	unsigned int m = size_var;
	if (&clone == this) return *this;
	for (s = table, e = &table[primes[pos]] ; s != e && m ; ++s)
		if ((p = *s)) {
			do {
				t = p;
				p = p->next;
				delete t;
			} while (p && --m);
			*s = 0;
		}
	size_var = unique_var = 0;
	if (pos < clone.pos || pos > clone.pos+1)
		try {
			extend(clone.pos);
		} catch (std::bad_alloc&) {
			throw overflow();
		}
	for (m = 0, s = table, e = &table[primes[pos]],
	     c = clone.table ; s != e ; ++s, ++c) {
		if ((p = *c))
			try {
				node *n = *s = new node(p->key, p->data, 0);
				m++;
				while ((p = p->next)) {
					n->next = new node(p->key, p->data, 0);
					n = n->next;
					m++;
				}	
			} catch (std::bad_alloc&) {
				for (e = &table[-1] ; s != e && m ; --s)
					if ((p = *s)) {
						do {
							t = p;
							p = p->next;
							delete t;
						} while (p && --m);
						*s = 0;
					}
				delete[] table;
				throw overflow();
			} catch (...) {
				for (e = &table[-1] ; s != e && m ; --s)
					if ((p = *s)) {
						do {
							t = p;
							p = p->next;
							delete t;
						} while (p && --m);
						*s = 0;
					}
				delete[] table;
				throw;
			}
	}
	size_var = clone.size_var;
	unique_var = clone.unique_var;
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>::~hash_multimap(void) {
	node **s, **e, *p, *t;
	unsigned int m = size_var;
	for (s = table, e = &table[primes[pos]] ; s != e && m ; ++s) {
		p = *s;
		while (p) {
			t = p;
			p = p->next;
			delete t;
			m--;
		}
	}
	delete[] table;
}


template <class K, class T, class H, class E>
bool hash_multimap<K,T,H,E>::empty(void) const {
	return !size_var;
}


template <class K, class T, class H, class E>
unsigned int hash_multimap<K,T,H,E>::size(void) const {
	return size_var;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::clear(void) {
	node **s, **e, *p, *t;
	unsigned int m = size_var;
	for (s = table, e = &table[primes[pos]] ; s != e && m ; ++s)
		if ((p = *s)) {
			do {
				t = p;
				p = p->next;
				delete t;
			} while (p && --m);
			*s = 0;
		}
	size_var = unique_var = 0;
	try {
		extend(0);
	} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::reserve(unsigned int nsize) {
	int npos = pos;
	while (nsize > (primes[npos] / 10) * 13)
		npos++;
	if (npos != pos)
		try {
			extend(npos);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
bool hash_multimap<K,T,H,E>::find(const K& k) const {
	node *p = table[hash(k) % primes[pos]];
	while (p) {
		if (equal(p->key, k))
			return true;
		p = p->next;
	}
	return false;
}


template <class K, class T, class H, class E>
unsigned int hash_multimap<K,T,H,E>::count(const K& k) const {
	node *p = table[hash(k) % primes[pos]];
	unsigned int c = 0;
	while (p) {
		if (equal(p->key, k)) c++;
		p = p->next;
	}
	return c;
}


template <class K, class T, class H, class E>
T& hash_multimap<K,T,H,E>::operator [] (const K& k) {
	node *p = table[hash(k) % primes[pos]];
	while (p) {
		if (equal(p->key, k))
			return p->data;
		p = p->next;
	}
	throw underflow();
}


template <class K, class T, class H, class E>
const T& hash_multimap<K,T,H,E>::operator [] (const K& k) const {
	node *p = table[hash(k) % primes[pos]];
	while (p) {
		if (equal(p->key, k))
			return p->data;
		p = p->next;
	}
	throw underflow();
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::insert(const K& k, const T& d) {
	unsigned int o = primes[pos];
	node **n = &table[hash(k) % o];
	node *p = *n;
	bool u = true;
	while (p) {
		if (equal(p->key, k)) {
			u = false;
			break;
		}
		p = p->next;
	}
	try {
		p = new node(k, d, *n);
	} catch (std::bad_alloc&) {
		throw overflow();
	}
	*n = p;
	if (u) unique_var++;
	if (++size_var > (o / 10) * 13)
		try {
			extend(pos + 1);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::remove(const K& k) {
	unsigned int o = primes[pos], c = 0;
	node **n = &table[hash(k) % o];
	node *t, *p = *n, *pp = 0;
	while (p)
		if (equal(p->key, k)) {
			if (pp) pp->next = p->next;
			else *n = p->next;
			t = p;
			p = p->next;
			delete t;
			c++;
		} else {
			pp = p;
			p = p->next;
		}
	if (!c) throw underflow();
	size_var -= c;
	unique_var--;
	if (--size_var < (o / 20) * 13)
		try {
			extend(pos - 1);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::extract(const K& k, unsigned int a = 1) {
	unsigned int o = primes[pos];
	node **n, *p, *pp = 0, *t;
	bool u = (a == 1);
	if (!a) throw offbounds();
	n = &table[hash(k) % o];
	*p = *n;
	while (p) {
		if (equal(p->key, k) && !--a) {
			if (pp) pp->next = p->next;
			else *n = p->next;
			t = p->next;
			delete p;
			break;
		}
		pp = p;
		p = p->next;
	}
	if (!p) throw underflow();
	if (u) {
		while (t && !equal(t->key, k))
			t = t->next;
		if (!t) unique_var--;
	}
	if (--size_var < (o / 20) * 13)
		try {
			extend(pos - 1);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::merge(hash_multimap<K,T,H,E>& param) {
	hash_multimap<K,T,H,E> *b, *l;
	node **s, **e, **n, *t, *p, *np;
	unsigned int m, o;
	if (this == &param) return *this;
	o = primes[pos];
	for (m = param.size_var, s = param.table,
	     e = &s[param.primes[param.pos]] ; s != e && m ; ++s) {
		p = *s;
		while (p) {
			n = &table[hash(p->key) % o];
			np = *n;
			while (np && !equal(p->key, np->key))
				np = np->next;
			t = p;
			p = p->next;
			t->next = *n;
			*n = t;
			if (!np) unique_var++;
		}
		*s = 0;
	}
	size_var += param.size_var;
	param.size_var = param.unique_var = 0;
	if (size_var > (o / 10) * 13)
		try {
			extend(pos + 1);
		} catch (std::bad_alloc&) {}
	return *this;
}


template <class K, class T, class H, class E>
hash_multimap<K,T,H,E>& hash_multimap<K,T,H,E>::swap(hash_multimap<K,T,H,E>& param) {
	unsigned int ti;
	node **t = table;
	table = param.table;
	param.table = t;
	ti = (unsigned int)pos;
	pos = param.pos;
	param.pos = (int)ti;
	ti = size_var;
	size_var = param.size_var;
	param.size_var = ti;
	return *this;
}

}

#endif
